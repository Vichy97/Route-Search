"""
Date custom scalar type
"""
scalar Date

"""
Mongo uuid custom scalar type
"""
scalar MUUID

type Query {
  climb(uuid: ID): Climb

  area(uuid: ID): Area

  areas(filter: Filter, sort: Sort): [Area]

  stats: Stats

  cragsNear(placeId: String, lnglat: Point, minDistance: Int = 0, maxDistance: Int = 48000, includeCrags: Boolean = false): [CragsNear]

  cragsWithin(filter: SearchWithinFilter): [Area]

  countries: [Area]

  organization(muuid: MUUID): Organization

  organizations(filter: OrgFilter, sort: OrgSort, limit: Int): [Organization]

  """
  Get single media object.
  """
  media(input: MediaInput): MediaWithTags

  """
  Get recent media with tags group by users.
  """
  getMediaForFeed(input: MediaForFeedInput): [MediaByUsers]

  """
  Get all media belonging to a user (media with or without tags).
  """
  getUserMedia(input: UserMediaInput): [MediaWithTags]

  """
  Get media cursor with pagination support.  We only support forward cursor.
  See 
  - https://graphql.org/learn/pagination/
  - https://relay.dev/graphql/connections.htm
  """
  getUserMediaPagination(input: UserMediaInput): UserMedia

  """
  Get a list of users and their tagged photo count.
  """
  getTagsLeaderboard(limit: Int): TagsLeaderboard

  """
  Gets all of the users current ticks by their Auth-0 userId or username
  """
  userTicks(userId: MUUID, username: String): [TickType]

  """
  Gets all of the users current ticks for a specific climb by their
  Auth-0 userId and Open-Beta ClimbId
  """
  userTicksByClimbId(userId: String, climbId: String): [TickType]

  getChangeHistory(filter: AllHistoryFilter): [History]

  getAreaHistory(filter: AreaHistoryFilter): [History]

  getOrganizationHistory(filter: OrganizationHistoryFilter): [History]

  getPosts(input: GetPostsInput): GetPostsResponse

  getXMedia(input: GetXMediaInput): GetXMediaResponse

  getTags(input: GetTagInput): GetTagResponse

  """
  Check to see if a username already exists in the database.
  """
  usernameExists(input: UsernameInput!): Boolean

  """
  Get username object by user uuid
  """
  getUsername(input: UserIDInput!): UsernameDetail

  """
  Get user public profile
  """
  getUserPublicProfileByUuid(input: UserIDInput!): UserPublicProfile

  getUserPublicPage(input: UsernameInput!): UserPublicPage
}

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar ID

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

"""
The `Boolean` scalar type represents `true` or `false`.
"""
scalar Boolean

"""
A climbing route or a boulder problem
"""
type Climb {
  id: ID!

  """
  The UUID of the climb is the field used for identification.
  The id field is used in internal database relations, most GQL
  queries will use the uuid field.
  """
  uuid: ID!

  """
  The name that this climb is commonly identified by
  """
  name: String!

  """
  First ascent, if known. Who was the first person to climb this route?
  """
  fa: String

  """
  Total length in meters if known (-1 otherwise)
  """
  length: Int!

  """
  Number of bolts/permanent anchors, if known (-1 otherwise)
  """
  boltsCount: Int!

  """
  The grade(s) assigned to this climb. See GradeType documentation
  """
  grades: GradeType

  """
  Grade systems have minor variations between countries.
  gradeContext is a short abbreviated string that identifies the
  context in which the grade was assigned.
  """
  gradeContext: String

  type: ClimbType!

  safety: SafetyEnum

  metadata: ClimbMetadata!

  """
  Composable attributes for this climb, these are the bread and butter
  guidebook-like data that make up the bulk of the text beta for this climb
  """
  content: Content!

  """
  Area names traversing up the heirarchy from this climbs immediate
  parent to the root area.
  """
  pathTokens: [String!]!

  """
  Area UUIDs traversing up the heirarchy from this climbs immediate
  parent to the root area.
  """
  ancestors: [String!]!

  """
  Media associated with this climb
  """
  media: [MediaWithTags]

  yds: String @deprecated(reason: "Migrating to 'grades' field")

  """
  The parent area object
  """
  parent: Area!

  """
  Metadata about creation & update of this climb
  """
  authorMetadata: AuthorMetadata!
}

type ClimbMetadata {
  lat: Float

  lng: Float

  left_right_index: Int

  leftRightIndex: Int

  """
  If this climb originated from Mountain Project, this is the ID
  """
  mp_id: String

  climb_id: ID!

  climbId: ID!
}

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Float

"""
Composable attributes for this climb, these are the bread and butter
guidebook-like data that make up the bulk of the text beta for this climb
"""
type Content {
  """
  The description of this climb, this is the main text field for this climb.
  This contains beta, visual descriptors, and any other information useful
  to identifying and attempting the climb
  """
  description: String

  """
  Information regarding Approach and other location context for this climb.
  Could also include information about the situation of this specific climb.
  """
  location: String

  """
  What do climbers need to know about making a safe attempt of this climb?
  What gear do they need, what are the hazards, etc.
  """
  protection: String
}

"""
What sort of climb is this? Routes can combine these fields, which is why
this is not an enumeration.

For example, a route may be a sport route, but also a top rope route.
"""
type ClimbType {
  """
  https://en.wikipedia.org/wiki/Traditional_climbing
  """
  trad: Boolean

  """
  https://en.wikipedia.org/wiki/Sport_climbing
  """
  sport: Boolean

  """
  https://en.wikipedia.org/wiki/Bouldering
  """
  bouldering: Boolean

  """
  https://en.wikipedia.org/wiki/Deep-water_soloing
  """
  deepwatersolo: Boolean

  """
  https://en.wikipedia.org/wiki/Alpine_climbing
  """
  alpine: Boolean

  """
  https://en.wikipedia.org/wiki/Ice_climbing
  """
  snow: Boolean

  """
  https://en.wikipedia.org/wiki/Ice_climbing
  """
  ice: Boolean

  mixed: Boolean

  """
  https://en.wikipedia.org/wiki/Aid_climbing
  """
  aid: Boolean

  """
  https://en.wikipedia.org/wiki/Top_rope_climbing
  """
  tr: Boolean
}

"""
There are a number of grading systems around the world, this enum
specifies the system. Developers will then use the key to best understand
its value.

https://en.wikipedia.org/wiki/Grade_(climbing)
"""
type GradeType {
  """
  [read more about vscale](https://www.99boulders.com/bouldering-grades#v-scale)
  """
  vscale: String

  """
  Yosemite Decimal System
  https://en.wikipedia.org/wiki/Grade_(climbing)#Yosemite_Decimal_System
  """
  yds: String

  """
  Ewbank grade
  https://en.wikipedia.org/wiki/Grade_(climbing)#Ewbank
  """
  ewbank: String

  french: String

  """
  Fontainebleau grading system, the most widely used grading system in Europe.
  Mostly used for bouldering.
  https://www.99boulders.com/bouldering-grades#font-scale-aka-fontainebleau-scale
  """
  font: String

  """
  UIAA grading system, typically used in Central Europe (e.g. Germany, Austria, Switzerland).
  Uses Arabic numerals, e.g. "7-", "7", "7+". (Roman numerals, like "VII-", are not supported).
  https://en.wikipedia.org/wiki/Grade_(climbing)#UIAA
  """
  uiaa: String
}

"""
rating indicates the quality and spacing of a route's available protection for a
competent climber. Amusingly, the letter codes associated with the different
protection ratings are based on the American system for movie ratings:
"""
enum SafetyEnum {
  UNSPECIFIED

  """
  Generally good protection with a few sections of poor protection
  """
  PG

  """
  Fair protection that may result in long, potentially dangerous falls
  """
  PG13

  """
  a part of a route where there isn’t any protection for a while below you.
  It happens when a route is sparsely bolted or there isn’t be anywhere to
  place a cam. “Running it out” is common on classic routes and
  sometimes hard sport overhangs.
  [source](https://www.climbernews.com/what-is-a-runout-in-climbing/)
  """
  runout

  terrain

  """
  where there's limited protection and the possibility of serious injury
  """
  R

  """
  No protection and overall the route is extremely dangerous.
  """
  X
}

"""
A climbing area, wall or crag
"""
type Area {
  id: ID!

  """
  We use UUID for identification of areas. The id field is used in internal database relations.
  """
  uuid: ID!

  """
  The name that this area is commonly identified by
  """
  area_name: String!

  areaName: String!

  """
  ShortCodes are short, globally uniqe codes that identify significant climbing areas
  """
  shortCode: String

  metadata: AreaMetadata!

  """
  The climbs that appear within this area. If this area is a leaf node, then these climbs can be understood
  as appearing physically on - rather than within - this area.
  """
  climbs: [Climb]

  """
  The areas that appear within this area. If this area is a leaf node,
  you will not expect to see any child areas.
  """
  children: [Area]

  """
  UUIDs of this areas parents, traversing up the heirarchy to the root area.
  """
  ancestors: [String]!

  """
  areaNames of this areas parents, traversing up the heirarchy to the root area.
  """
  pathTokens: [String]!

  """
  statistics about this area
  """
  aggregate: AggregateType

  content: AreaContent

  """
  pathTokens hashed into a single string
  """
  pathHash: String!

  """
  Grade systems have minor variations between countries.
  gradeContext is a short abbreviated string that identifies the
  context in which the grade was assigned.

  Area grade contexts will be inherited by its nearest child climbs.
  """
  gradeContext: String!

  """
  total climbs per km sq
  """
  density: Float!

  """
  The total number of climbs in this area
  """
  totalClimbs: Int!

  """
  Media associated with this area, or its child climbs
  """
  media: [MediaWithTags]

  """
  Metadata about creation & update of this area
  """
  authorMetadata: AuthorMetadata!

  """
  Organizations associated with this area or its parent areas
  """
  organizations: [Organization]
}

type AreaMetadata {
  isDestination: Boolean!

  """
  If this is true, this area has no children and is a leaf node.
  This means that the area is a crag, boulder or wall that has
  climbs as its direct decendents.
  If both leaf and isBoulder are true:
    - This area is a boulder.
    - climbs[] may only contain boulder problems.
  """
  leaf: Boolean!

  """
  If this is true, this area is a bouldering area or an individual boulder.
  """
  isBoulder: Boolean

  """
  centroid latitude of this areas bounding box
  """
  lat: Float!

  """
  centroid longitude of this areas bounding box
  """
  lng: Float!

  """
  NE and SW corners of the bounding box for this area
  """
  bbox: [Float]!

  """
  Left-to-right sorting index.  Undefined or -1 or unsorted area.
  """
  leftRightIndex: Int

  """
  Mountainproject ID (if associated)
  """
  mp_id: String!

  area_id: ID!

  areaId: ID!
}

"""
Aggregations of data about this area, its children and its climbs.
"""
type AggregateType {
  """
  Sums of climbs grouped by arbitrary grade
  """
  byGrade: [CountByGroupType]

  """
  Sums of climbs grouped by discipline
  """
  byDiscipline: CountByDisciplineType

  """
  Sums of climbs grouped by grade band (Rough adjective difficulty)
  """
  byGradeBand: CountByGradeBand
}

type CountByDisciplineType {
  trad: DisciplineStatsType

  sport: DisciplineStatsType

  bouldering: DisciplineStatsType

  boulder: DisciplineStatsType @deprecated(reason: "Migrating to 'bouldering'")

  deepwatersolo: DisciplineStatsType

  alpine: DisciplineStatsType

  snow: DisciplineStatsType

  ice: DisciplineStatsType

  mixed: DisciplineStatsType

  aid: DisciplineStatsType

  tr: DisciplineStatsType
}

type DisciplineStatsType {
  total: Int!

  bands: CountByGradeBand!
}

type CountByGroupType {
  count: Int

  label: String
}

type CountByGradeBand {
  unknown: Int

  beginner: Int

  intermediate: Int

  advanced: Int

  expert: Int
}

type AreaContent {
  description: String
}

input Point {
  lat: Float

  lng: Float
}

input SearchWithinFilter {
  bbox: [Float]

  zoom: Float
}

input Sort {
  area_name: Int

  density: Int

  totalClimbs: Int
}

input Filter {
  area_name: AreaFilter

  leaf_status: LeafFilter

  path_tokens: PathFilter

  field_compare: [ComparisonFilter]
}

enum Field {
  density

  totalClimbs
}

enum CompareType {
  lt

  gt

  eq
}

input ComparisonFilter {
  field: Field

  num: Float

  comparison: CompareType
}

input PathFilter {
  tokens: [String]!

  exactMatch: Boolean

  size: Int
}

input AreaFilter {
  match: String!

  exactMatch: Boolean
}

input LeafFilter {
  isLeaf: Boolean!
}

type Stats {
  totalClimbs: Int!

  totalCrags: Int!
}

type CragsNear {
  _id: ID!

  placeId: String!

  count: Int!

  crags: [Area]
}

"""
A climbing area, wall or crag
"""
type Organization {
  id: ID!

  """
  Type of organization. Currently we only support local climbing organizations, which
  are associated with certain climbing areas. In future there may be advocacy groups
  like the Access Fund or interest groups like the American Alpine Club that are not
  associated with any specific climbing areas.
  """
  orgType: String!

  """
  We use orgId for identification of organizations. The id field is used in internal database relations.
  """
  orgId: MUUID!

  associatedAreaIds: [MUUID]

  excludedAreaIds: [MUUID]

  """
  Name of organization to be displayed on the site.
  """
  displayName: String!

  content: OrganizationContent

  createdAt: Date

  createdBy: MUUID

  updatedAt: Date

  updatedBy: MUUID
}

type OrganizationContent {
  website: String

  email: String

  donationLink: String

  instagramLink: String

  facebookLink: String

  hardwareReportLink: String

  description: String
}

input OrgSort {
  displayName: Int

  updatedAt: Int
}

input OrgFilter {
  displayName: DisplayNameFilter

  associatedAreaIds: AssociatedAreaIdsFilter

  excludedAreaIds: ExcludedAreaIdsFilter
}

input DisplayNameFilter {
  match: String!

  exactMatch: Boolean
}

"""
Filter for organizations that are associated with an area.
"""
input AssociatedAreaIdsFilter {
  includes: [MUUID]
}

"""
Filter for organizations that have not excluded themselves from an area.
"""
input ExcludedAreaIdsFilter {
  excludes: [MUUID]
}

type Mutation {
  """
  Add one or more media objects. Each media object may contain one tag.
  """
  addMediaObjects(input: [NewMediaObjectInput]): [MediaWithTags]

  """
  Delete one media object.
  """
  deleteMediaObject(input: MediaDeleteInput!): Boolean!

  """
  Add an entity tag to a media.
  """
  addEntityTag(input: MediaEntityTagInput): EntityTag!

  """
  Remove an entity tag from a media.
  """
  removeEntityTag(input: EntityTagDeleteInput!): Boolean!

  """
  Add an area attributes
  """
  addArea(input: AreaInput): Area

  """
  Update area attributes
  """
  updateArea(input: AreEditableFieldsInput): Area

  """
  Set area destination flag
  """
  setDestinationFlag(input: DestinationFlagInput): Area

  """
  Remove an area
  """
  removeArea(input: RemoveAreaInput): Area

  """
  Update area sorting order in bulk
  """
  updateAreasSortingOrder(input: [AreaSortingInput]): [ID]

  """
  Add an organization
  """
  addOrganization(input: AddOrganizationInput): Organization

  """
  Update organization attributes
  """
  updateOrganization(input: OrganizationEditableFieldsInput): Organization

  """
  Adds a tick to the MongoDB

  NOTE: climbId is created from the hash function on the backend,
  input the MP id into the function to create it, or just search for the climb on open beta

  NOTE: source is either MP or OB, which stand for Mountain project and open beta respectively
  the database will reject anything else. This allows us to determine where the tick was created
  """
  addTick(input: Tick): TickType

  """
  Deletes a tick from MongoDB by the _id property created in the database
  """
  deleteTick(_id: ID): DeleteSingleTickResult

  """
  Deletes all ticks created by a user by the userId,
  mainly a dev feature for while we are working on getting the schema correct
  """
  deleteAllTicks(userId: String): DeleteAllTickResult

  """
  Imports a users ticks from mountain project, this feature also deletes all ticks previously imported from mountain project
  before importing them, allowing users to constantly update their ticks without creating duplicates
  """
  importTicks(input: [Tick]): [TickType]

  editTick(input: TickFilter): TickType

  """
  Create or update one or more climbs.
  """
  updateClimbs(input: UpdateClimbsInput): [ID]

  """
  Delete one or more climbs
  """
  deleteClimbs(input: DeleteManyClimbsInput): Int

  addPost(input: AddPostInput): Post

  removePost(input: RemovePostInput): RemovePostResponse

  addXMedia(input: AddXMediaInput): XMedia

  removeXMedia(input: RemoveXMediaInput): RemoveXMediaResponse

  """
  Update a user profile or create a new profile if it doesn't exist.
  Note:  The email field is required when creating a new profile and
  will be ignore in subsequent update calls to prevent users from 
  changing their email.  The frontend  calls this API whenever a new user 
  logs in; their email therefore should have been verified at this point.
  When we support email address change in the future, we will need to 
  create a separate update-email mutation to make sure users take the
  neccessary steps.
  """
  updateUserProfile(input: UserProfileInput): Boolean
}

"""
User media cursor with pagination support.
See https://graphql.org/learn/pagination/
"""
type UserMedia {
  userUuid: ID!

  mediaConnection: MediaConnection!
}

"""
Media connection.
See https://graphql.org/learn/pagination/
"""
type MediaConnection {
  edges: [MediaEdge!]!

  pageInfo: PageInfo!
}

"""
Media edge.
See https://graphql.org/learn/pagination/
"""
type MediaEdge {
  """
  Media object
  """
  node: MediaWithTags

  """
  Current node cursor.  The frontend can pass this value to the `after` input parameter to fetch the next page.
  """
  cursor: ID!
}

type PageInfo {
  """
  True if there are more data after the last cursor.
  """
  hasNextPage: Boolean!

  """
  Not yet supported.
  """
  endCursor: String
}

type TagsByUser {
  username: String

  userUuid: ID!

  total: Int!
}

type AllTimeTags {
  totalMediaWithTags: Int!

  byUsers: [TagsByUser]!
}

type TagsLeaderboard {
  allTime: AllTimeTags
}

"""
Media object metadata
"""
interface IMediaMetadata {
  """
  Unique id
  """
  id: ID!

  """
  Width in pixels
  """
  width: Int!

  """
  Height in pixels
  """
  height: Int!

  """
  Valid format: jpeg, png, webp, avif
  """
  format: String!

  """
  Upload time
  """
  uploadTime: Date!

  """
  File size in bytes
  """
  size: Int!
}

"""
All tags by an author
"""
type MediaByUsers {
  username: String

  userUuid: ID!

  mediaWithTags: [MediaWithTags]
}

"""
A tag target (an area or a climb)
"""
type EntityTag {
  id: ID!

  """
  Area or climb ID
  """
  targetId: ID!

  """
  Climb name
  """
  climbName: String

  """
  Area name
  """
  areaName: String!

  """
  ancestors name
  """
  ancestors: String!

  """
  Target type: 0: climb, 1: area
  """
  type: Int!

  """
  Longitude
  """
  lng: Float!

  """
  Latitude
  """
  lat: Float!
}

"""
Represent a media object
"""
type MediaWithTags implements IMediaMetadata {
  id: ID!

  username: String

  mediaUrl: String!

  width: Int!

  height: Int!

  format: String!

  uploadTime: Date!

  size: Int!

  entityTags: [EntityTag]
}

input NewMediaObjectInput {
  userUuid: ID!

  width: Int!

  height: Int!

  format: String!

  size: Int!

  mediaUrl: String!

  entityTag: EmbeddedEntityInput
}

input EmbeddedEntityInput {
  """
  What this tag is pointing to (a climb/area)
  """
  entityId: ID!

  """
  0: climb, 1: area
  """
  entityType: Int!
}

"""
Input parameters for querying a single media object
"""
input MediaInput {
  id: ID!
}

"""
Input parameters for creating a new tag
"""
input MediaEntityTagInput {
  """
  Target media id
  """
  mediaId: ID!

  """
  What this tag is pointing to (a climb/area)
  """
  entityId: ID!

  """
  0: climb, 1: area
  """
  entityType: Int!
}

"""
Input parameters for deleting a tag
"""
input EntityTagDeleteInput {
  mediaId: ID!

  tagId: ID!
}

"""
Input parameters for deleting a media
"""
input MediaDeleteInput {
  mediaId: ID!
}

"""
Input parameters for user media queries.
"""
input UserMediaInput {
  """
  User UUID.  Ex: a0ca9ebb-aa3b-4bb0-8ddd-7c8b2ed228a5
  """
  userUuid: ID!

  """
  Max number of objects return.  Ignore when using with pagination query.
  """
  maxFiles: Int

  """
  Number of objects per page (Default = 6).
  """
  first: Int

  """
  Returning page data after this cursor (exclusive).  Return the first page if omitted.
  """
  after: ID
}

input MediaForFeedInput {
  maxUsers: Int

  maxFiles: Int
}

input DestinationFlagInput {
  id: ID!

  flag: Boolean!
}

input CountryInput {
  alpha3ISOCode: String
}

input AreaInput {
  name: String!

  parentUuid: ID

  countryCode: String

  isDestination: Boolean

  isLeaf: Boolean

  isBoulder: Boolean

  experimentalAuthor: ExperimentalAuthorType
}

input RemoveAreaInput {
  uuid: String!
}

input AreEditableFieldsInput {
  uuid: String!

  areaName: String

  isDestination: Boolean

  isLeaf: Boolean

  isBoulder: Boolean

  shortCode: String

  lat: Float

  lng: Float

  description: String

  experimentalAuthor: ExperimentalAuthorType

  leftRightIndex: Int
}

"""
Area sorting input param
"""
input AreaSortingInput {
  """
  Area UUID
  """
  areaId: String!

  """
  Left-to-right sorting index. The backend enforces uniqueness for value >= 0.  Use -1 to indicate unsorted order.
  """
  leftRightIndex: Int!
}

input AddOrganizationInput {
  displayName: String!

  orgType: String!

  associatedAreaIds: [MUUID]

  excludedAreaIds: [MUUID]

  website: String

  email: String

  donationLink: String

  instagramLink: String

  facebookLink: String

  hardwareReportLink: String

  description: String
}

input OrganizationEditableFieldsInput {
  orgId: MUUID!

  associatedAreaIds: [MUUID]

  excludedAreaIds: [MUUID]

  displayName: String

  website: String

  email: String

  donationLink: String

  instagramLink: String

  facebookLink: String

  hardwareReportLink: String

  description: String
}

"""
This is our tick type, containing the name, notes climbId,
etc of the ticked climb NOTE: source must either be MP or OB
which stand for Mountain Project, or Open Beta respectively
"""
type TickType {
  _id: ID

  """
  User that this tick belongs to 
  """
  userId: String

  """
  The name of this climb.

  When the tick is imported from an external data source, there is no relational guarentee,
  and as such we need this field filled out to be able to display the name of the climb.

  Native ticks may have this field enforced against the climb that it relates to.
  If the name changes in its related climb document, the value stored here may be back-updated
  to reflect the new name.
  """
  name: String

  """
  freeform text field that a user fills out as commentary on this tick. This unstructured data
  is one of the most important ones on the tick, as users may give their human opinion on the
  climb attempt that they made.

  Sandbagged, Chipped, bad conditions, may all be examples of notes that a user may submit to accompany
  the tick.
  """
  notes: String

  """
  Which climb is ascociated with this tick? There is weak-relationship between this ID
  and a climb document in the climbs collection. This is because we support importing
  climbs from external sources, and we may not have a climb document for every climb

  When source is OpenBeta, this can be understood as a foreign key to the climbs collection uuid.
  """
  climbId: String

  """
  Arbitrary string that represents the style of the climb.
  Lead, toprope, bouldering, would be examples of values you might find here.
  If this is a native tick, you can enforce updated values here by referencing
  the climb document (climbId -> climbs:uuid)
  """
  style: String

  """
  Describe the type of successful attempt that was made here.
  Fell/Hung, Flash, Redpoint, Onsight, would be examples of values you might find here.
  This is again a free-form field. Data of practically any descriptive nature may find
  itself here.
  """
  attemptType: String

  """
  Not the same as date created. Ticks can be back-filled by the user, and do
  not need to be logged at the time that the tick is created inside the mongo
  database.
  This is a string because we do not enforce any particular date format at this time.
  """
  dateClimbed: Date

  """
  What grade is this tick ascociated with?
  This exists in the tick document both for easy-fetching and to ensure
  proper operation when importing ticks for entities that cannot be located
  within OpenBeta's database.
  """
  grade: String

  source: TickSource
}

"""
The tick sources that openbeta supports.
"""
enum TickSource {
  """
  OpenBeta (native tick)
  """
  OB

  """
  MountainProject (imported tick)
  """
  MP
}

"""
This is our tick type input, containing the name,
notes climbId, etc of the ticked climb, all fields are required

NOTE: source must either be MP or OB which stand for Mountain Project, or Open Beta respectively
"""
input Tick {
  name: String!

  notes: String

  climbId: String!

  userId: String!

  style: String

  attemptType: String

  dateClimbed: Date!

  grade: String!

  source: TickSource!
}

"""
Takes in the MongoId and a tick object to replace the old tick object with
"""
input TickFilter {
  _id: ID!

  updatedTick: Tick
}

type DeleteSingleTickResult {
  _id: ID!

  removed: Boolean!
}

type DeleteAllTickResult {
  removed: Boolean!

  deletedCount: Int
}

input AllHistoryFilter {
  uuidList: [ID]

  userUuid: ID

  fromDate: Date

  toDate: Date
}

input AreaHistoryFilter {
  areaId: ID
}

input OrganizationHistoryFilter {
  orgId: MUUID
}

type UpdateDescription {
  updatedFields: [String]
}

type Change {
  changeId: ID!

  dbOp: String!

  fullDocument: Document

  updateDescription: UpdateDescription
}

union Document = Area|Climb|Organization

type History {
  id: ID!

  editedBy: ID!

  editedByUser: String

  operation: String!

  createdAt: Date!

  changes: [Change]
}

"""
Author metadata
"""
type AuthorMetadata {
  createdAt: Date

  createdBy: ID

  createdByUser: String

  updatedAt: Date

  updatedBy: ID

  updatedByUser: String
}

input DeleteManyClimbsInput {
  parentId: ID

  idList: [ID]
}

"""
Create/update climbs input parameter.
"""
input UpdateClimbsInput {
  """
  Parent area ID
  """
  parentId: ID!

  """
  Array of change records
  """
  changes: [SingleClimbChangeInput]
}

"""
Climb change record.  If the climb ID is omitted or does not exist in the database, a new climb will be created.
"""
input SingleClimbChangeInput {
  """
  Climb UUID
  """
  id: ID

  name: String

  disciplines: DisciplineType

  grade: String

  leftRightIndex: Int

  description: String

  location: String

  protection: String

  """
  Legacy FA data
  """
  fa: String

  """
  Length in meters
  """
  length: Int

  experimentalAuthor: ExperimentalAuthorType
}

input DisciplineType {
  """
  https://en.wikipedia.org/wiki/Traditional_climbing
  """
  trad: Boolean

  """
  https://en.wikipedia.org/wiki/Sport_climbing
  """
  sport: Boolean

  """
  https://en.wikipedia.org/wiki/Bouldering
  """
  bouldering: Boolean

  """
  https://en.wikipedia.org/wiki/Deep-water_soloing
  """
  deepwatersolo: Boolean

  """
  https://en.wikipedia.org/wiki/Alpine_climbing
  """
  alpine: Boolean

  """
  https://en.wikipedia.org/wiki/Ice_climbing
  """
  snow: Boolean

  """
  https://en.wikipedia.org/wiki/Ice_climbing
  """
  ice: Boolean

  mixed: Boolean

  """
  https://en.wikipedia.org/wiki/Aid_climbing
  """
  aid: Boolean

  """
  https://en.wikipedia.org/wiki/Top_rope_climbing
  """
  tr: Boolean
}

input ExperimentalAuthorType {
  displayName: String!

  url: String!
}

"""
Input params for getting posts by ID
"""
input GetPostsInput {
  postIds: [ID]!
}

"""
Input params for creating a new post
"""
input AddPostInput {
  userId: ID!

  photoUrls: [String]!

  description: String
}

type AddPostResponse {
  postId: String
}

"""
Input params for removing an existing post
"""
input RemovePostInput {
  postId: ID!
}

type RemovePostResponse {
  numDeleted: String
}

type GetPostsResponse {
  posts: [Post]
}

"""
Posts are created by users. They are displayed on the posts page.
"""
type Post {
  _id: ID

  userId: ID!

  xMedia: [XMedia]!

  description: String
}

"""
Input for adding a new media input. mediaType - 0: photo
"""
input AddXMediaInput {
  userId: ID!

  mediaType: Int!

  mediaUrl: String!

  tagIds: [ID]
}

input RemoveXMediaInput {
  xMediaId: ID!
}

type RemoveXMediaResponse {
  numDeleted: String
}

input GetXMediaInput {
  xMediaIds: [ID]!
}

type GetXMediaResponse {
  xMedia: [XMedia]
}

"""
XMedia is created as a result of a new Post. They are a child of Post documents.
"""
type XMedia {
  _id: ID

  userId: ID!

  mediaType: Int!

  mediaUrl: String!

  tagIds: [ID]
}

"""
Input for adding a new tag input.
"""
input AddTagInput {
  mediaUrl: String!

  mediaUuid: ID!

  destinationId: ID!

  destinationType: Int!
}

type AddTagResponse {
  tagId: ID
}

input RemoveTagInput {
  tagId: ID!
}

type RemoveTagResponse {
  numDeleted: String
}

input GetTagInput {
  tagIds: [ID]!
}

type GetTagResponse {
  tag: [Tag]
}

"""
Tags are what link a post & photo to climb(s) and area(s). XMedia contains an array of TagIds.
"""
type Tag {
  _id: ID

  mediaUrl: String!

  mediaUuid: ID!

  destinationId: ID!

  destinationType: Int!
}

input UsernameInput {
  username: String!
}

input UserIDInput {
  userUuid: ID!
}

input UserProfileInput {
  userUuid: ID!

  username: String

  displayName: String

  bio: String

  website: String

  email: String

  avatar: String
}

"""
Username detail object
"""
type UsernameDetail {
  userUuid: ID!

  username: String

  lastUpdated: Date
}

type UserPublicPage {
  profile: UserPublicProfile

  media: UserMedia
}

type UserPublicProfile {
  userUuid: ID!

  username: String!

  displayName: String

  bio: String

  website: String

  avatar: String
}

"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  description: String

  """
  A list of all types supported by this server.
  """
  types: [__Type!]!

  """
  The type that query operations will be rooted at.
  """
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type

  """
  A list of all directives supported by this server.
  """
  directives: [__Directive!]!
}

"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.

Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
"""
type __Type {
  kind: __TypeKind!

  name: String

  description: String

  specifiedByURL: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields(includeDeprecated: Boolean = false): [__InputValue!]

  ofType: __Type
}

"""
An enum describing what kind of type a given `__Type` is.
"""
enum __TypeKind {
  """
  Indicates this type is a scalar.
  """
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.
  """
  INTERFACE

  """
  Indicates this type is a union. `possibleTypes` is a valid field.
  """
  UNION

  """
  Indicates this type is an enum. `enumValues` is a valid field.
  """
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """
  Indicates this type is a list. `ofType` is a valid field.
  """
  LIST

  """
  Indicates this type is a non-null. `ofType` is a valid field.
  """
  NON_NULL
}

"""
Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
"""
type __Field {
  name: String!

  description: String

  args(includeDeprecated: Boolean = false): [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
"""
type __InputValue {
  name: String!

  description: String

  type: __Type!

  """
  A GraphQL-formatted string representing the default value for this input value.
  """
  defaultValue: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
"""
type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
"""
type __Directive {
  name: String!

  description: String

  isRepeatable: Boolean!

  locations: [__DirectiveLocation!]!

  args(includeDeprecated: Boolean = false): [__InputValue!]!
}

"""
A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
  """
  Location adjacent to a query operation.
  """
  QUERY

  """
  Location adjacent to a mutation operation.
  """
  MUTATION

  """
  Location adjacent to a subscription operation.
  """
  SUBSCRIPTION

  """
  Location adjacent to a field.
  """
  FIELD

  """
  Location adjacent to a fragment definition.
  """
  FRAGMENT_DEFINITION

  """
  Location adjacent to a fragment spread.
  """
  FRAGMENT_SPREAD

  """
  Location adjacent to an inline fragment.
  """
  INLINE_FRAGMENT

  """
  Location adjacent to a variable definition.
  """
  VARIABLE_DEFINITION

  """
  Location adjacent to a schema definition.
  """
  SCHEMA

  """
  Location adjacent to a scalar definition.
  """
  SCALAR

  """
  Location adjacent to an object type definition.
  """
  OBJECT

  """
  Location adjacent to a field definition.
  """
  FIELD_DEFINITION

  """
  Location adjacent to an argument definition.
  """
  ARGUMENT_DEFINITION

  """
  Location adjacent to an interface definition.
  """
  INTERFACE

  """
  Location adjacent to a union definition.
  """
  UNION

  """
  Location adjacent to an enum definition.
  """
  ENUM

  """
  Location adjacent to an enum value definition.
  """
  ENUM_VALUE

  """
  Location adjacent to an input object type definition.
  """
  INPUT_OBJECT

  """
  Location adjacent to an input object field definition.
  """
  INPUT_FIELD_DEFINITION
}

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include ("Included when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip ("Skipped when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Marks an element of a GraphQL schema as no longer supported.
"""
directive @deprecated ("Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https:\/\/commonmark.org\/)." reason: String = "No longer supported") on FIELD_DEFINITION|ARGUMENT_DEFINITION|INPUT_FIELD_DEFINITION|ENUM_VALUE

"""
Exposes a URL that specifies the behavior of this scalar.
"""
directive @specifiedBy ("The URL that specifies the behavior of this scalar." url: String!) on SCALAR

schema {
  query: Query
  mutation: Mutation
}
